_ubiqx_ Modules
===============

Simple tools you should never need to write yourself +
(except maybe for a Computer Science class).

* Linked Lists (Single and Double)
* Binary Trees (Simple, AVL, and Splay)
* A Sparse Array and Caching module based on the above.

These are the little training wheels that keep getting re-invented over and
over again when they should be written once and just re-used.

The modules have been around for a while.

* The *Binary Tree* code was originally written in the late 1980's/early
  1990's for use on the Amiga platform.  The VAX/VMS OS included an AVL Tree
  implementation (which didn't support the delete operation).  It seemed, at
  the time, that the Amiga should have the same feature.

* The *Linked List* code was added in the mid 1990's to consolidate several
  different implementations within a single Linux/BSD application.  Linked
  list implementations are sometimes written and rewritten out of habit.

* The *Cache* code is a simple application of the Binary Splay Tree, in
  which the Least Recently Used (LRU) nodes _tend_ to move toward the bottom
  of the tree.  When the cache becomes full (as determined by the calling
  application), suitably low-hanging leaf nodes can be selected for removal.

* The *Sparse Array* is a nested tree structure, providing a mechanism for
  mapping key-tuples to values.

All of these modules have been tested on Linux, OpenBSD, and FreeBSD.  
They are fairly self-contained, and should port to other platforms with 
relative ease.  They are not optimized for any particular environment or 
application, however.  Obviously, if you need optimized performance then 
you probably need tailored code.

Using the _ubiqx_ Modules
-------------------------

The modules are written in plain C, in an object-oriented style. The header
files contain macros that hide much of the gory details.  It is possible, for
example to switch between binary tree types simply by changing which header
is included.  There are example programs in the repository.

These modules rely on a simple quirk of the C language.  The specification
states that the address of a structure is the same as the address of its first
member (see [ANSI-C, pg.174]).  As a result, if you include the node structure
as the first item in your own data structure, you can simply pass that
structure into the module functions.

Compiling
~~~~~~~~~

A brief guide to some of the more useful make targets:

* *`make`* - Builds all of the test tools and the modules library.
* *`make lib`* - Builds the `libubiqx.a` modules library.
* *`make clean`* - Deletes compiled files.
* *`make rebuild`* - Deletes compiled files and rebuild everything.

References
----------

[ANSI-C]::
  Kernighan, Brian W.; Ritchie, Dennis M. (March 1988).  __The C Programming
  Language (2nd ed.).__  Englewood Cliffs, NJ: Prentice Hall.  ISBN
  0-13-110362-8.  (...but you knew that.)

Wikipedia::
  AVL Tree;;
    http://en.wikipedia.org/wiki/AVL_tree
  Binary Tree;;
    http://en.wikipedia.org/wiki/Binary_tree
  Splay Tree;;
    http://en.wikipedia.org/wiki/Splay_tree

License
-------
See the individual files for specific license information.

In general: ::
  * The modules are released under the LGPLv2 or later.
  * The test programs tend to be released into the public domain.

Again, see the individual files for specific license information.

Coding Style
------------
It's called Whitesmith.  It has been around for quite some time.  There 
is a valid explanation for just about everything you hate about it, but 
I won't claim that makes it right (or wrong).  It's just what works best 
for yours truly.  I find it exceedingly easy to read.

In the 
https://www.kernel.org/doc/html/v4.10/process/coding-style.html[Linux 
Kernel Coding Style] doc, it says "Coding style is very personal".  The 
obvious corolary is that any attack on someone's coding style is a 
personal attack.  Just don't.

Where appropriate, the comments are in the process of being reformatted 
to Doxygen style, so that the copious internal documentation (of which 
there is an excessivly big bunch) can be made more accessible.

Timestamp
---------
$Id: README.asciidoc; 2020-07-27 19:47:22 -0500; Christopher R. Hertel$
