# ubiqx.dox
#
# This file provides the text of the main page of the Doxygen documentation
# for the ubiqx.modules project.
#

/**
@mainpage ubiqx Modules - Training Wheels

<i>
A long, long time ago<br/>
I can still remember how<br/>
My simple code would make me smile<br/>
And I knew that if I had my chance<br/>
That I could make these modules dance<br/>
And maybe they'd be happy to compile<br/>
</i>

Introduction
============

Simple tools you should never need to write yourself<br/>
(except maybe for a Computer Science class).
  - Linked Lists (Single and Double)
  - Binary Trees (Simple, AVL, and Splay)
  - A Sparse Array and a Caching module, based on the above.

These are the little training wheels that keep getting re-invented over and
over again when they should be written once and re-used forever.

The modules have been around for a while.

  - The *Binary Tree* code was originally written in the late 1980's/early
    1990's for use on the Amiga platform.  The VAX/VMS OS included an AVL
    Tree implementation (which didn't support the delete operation).  It
    seemed, at the time, that the Amiga should have the same feature.

  - The *Linked List* code was added in the mid 1990's to consolidate
    several different implementations that were all written for one
    large-scale application.  Linked list implementations are sometimes
    rewritten out of habit rather than purpose.

  - The *Cache* code is a simple application of the Binary Splay Tree, in
    which the Least Recently Used (LRU) nodes _tend_ to move toward the
    bottom of the tree.  When the cache becomes full (as determined by the
    calling application), suitably low-hanging leaf nodes can be selected
    for removal.

  - The *Sparse Array* is a nested tree structure, providing a mechanism for
    mapping key-tuples to values.

All of these modules have been tested on Linux, OpenBSD, FreeBSD, and a few
other environments.  They are fairly self-contained, and should port to
other platforms with relative ease.  They are not optimized for any
particular environment or application, however.  If you need optimized
performance then you probably need tailored code, but at least you have a
reference implementation from which to crib.

Documentation
-------------

This pile of code has always been well commented, and those comments have
now (c. 2020) been converted to [Doxygen](https://www.doxygen.nl/index.html)
format.  A suitable `Doxyfile` configuration file is included.

Using the _ubiqx_ Modules
-------------------------

The modules are written in plain C, in an object-oriented style. The header
files contain macros that hide much of the gory details.  It is possible, for
example to switch between binary tree types simply by changing which header
is included.  There are example programs in the repository.

These modules rely on a simple quirk of the C language.  C _does not_
guarantee the layout of a structure in memory, but the specification does
state that the address of a structure is the same as the address of its first
member (see [ANSI-C, pg.174]).  As a result, if you include the node structure
as the first item in your own data structure, you can simply pass a pointer to
an instance of that structure into the module functions.

Compiling
---------

A brief guide to some of the more useful make targets:

  - <b>`make`</b> - Builds all of the test tools and the modules library.
  - <b>`make lib`</b> - Builds the `libubiqx.a` modules library.
  - <b>`make clean`</b> - Deletes compiled files.
  - <b>`make rebuild`</b> - Deletes compiled files and rebuilds everything.

References
----------

<dl>
  <dt>[ANSI-C]</dt>
  <dd>
  Kernighan, Brian W.; Ritchie, Dennis M. (March 1988).  __The C
  Programming Language (2nd ed.).__  Englewood Cliffs, NJ: Prentice Hall.
  ISBN 0-13-110362-8.
  </dd>
  <dt>Wikipedia:</dt>
  <dd>
  - [AVL Tree](http://en.wikipedia.org/wiki/AVL_tree)
  - [Binary Tree](http://en.wikipedia.org/wiki/Binary_tree)
  - [Splay Tree](http://en.wikipedia.org/wiki/Splay_tree)
  </dd>
</dl>

License
-------
See the individual files for specific license information.

In general:
  - The modules are released under the LGPLv2 or later.
  - The test programs tend to be released into the public domain.

Coding Style
------------
It's called Whitesmith.  It has been around for quite some time and was once
extremely popular.  There is a valid explanation for just about everything
you hate about it, but I won't claim that makes it right (or wrong).  It's
just what works best for yours truly.  I find it exceedingly easy to read.

In the [Linux Kernel Coding
Style](https://www.kernel.org/doc/html/v4.10/process/coding-style.html) doc,
it says "Coding style is very personal".  The obvious corolary is that any
attack on someone's coding style is a personal attack.  Just don't.

----
\$Id: ubiqx.dox; 2020-09-27 14:08:20 -0500; crh$
*/
